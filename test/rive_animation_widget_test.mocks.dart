// Mocks generated by Mockito 5.4.6 from annotations
// in airplan/test/rive_animation_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:ui' as _i2;

import 'package:airplan/rive_controller.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i15;
import 'package:rive/rive.dart' as _i5;
import 'package:rive/src/core/core.dart' as _i4;
import 'package:rive/src/rive_core/animation/animation.dart' as _i16;
import 'package:rive/src/rive_core/animation/keyframe_interpolator.dart'
    as _i18;
import 'package:rive/src/rive_core/component.dart' as _i13;
import 'package:rive/src/rive_core/container_component.dart' as _i14;
import 'package:rive/src/rive_core/draw_rules.dart' as _i19;
import 'package:rive/src/rive_core/drawable.dart' as _i10;
import 'package:rive/src/rive_core/joystick.dart' as _i11;
import 'package:rive/src/rive_core/layout/layout_component_style.dart' as _i12;
import 'package:rive/src/rive_core/layout_component.dart' as _i6;
import 'package:rive/src/rive_core/shapes/paint/shape_paint_mutator.dart'
    as _i17;
import 'package:rive_common/layout_engine.dart' as _i7;
import 'package:rive_common/math.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePath_0 extends _i1.SmartFake implements _i2.Path {
  _FakePath_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAABB_1 extends _i1.SmartFake implements _i3.AABB {
  _FakeAABB_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAnimationList_2 extends _i1.SmartFake implements _i4.AnimationList {
  _FakeAnimationList_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEventList_3 extends _i1.SmartFake implements _i4.EventList {
  _FakeEventList_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeArtboard_4 extends _i1.SmartFake implements _i5.Artboard {
  _FakeArtboard_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  // TODO: implement isPlaying
  bool get isPlaying => throw UnimplementedError();

  @override
  void pause() {
    // TODO: implement pause
  }

  @override
  void play() {
    // TODO: implement play
  }
}

class _FakeVec2D_5 extends _i1.SmartFake implements _i3.Vec2D {
  _FakeVec2D_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMat2D_6 extends _i1.SmartFake implements _i3.Mat2D {
  _FakeMat2D_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLayoutAnimationData_7 extends _i1.SmartFake
    implements _i6.LayoutAnimationData {
  _FakeLayoutAnimationData_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLayoutStyle_8 extends _i1.SmartFake implements _i7.LayoutStyle {
  _FakeLayoutStyle_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLayoutNode_9 extends _i1.SmartFake implements _i7.LayoutNode {
  _FakeLayoutNode_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeContainerChildren_10 extends _i1.SmartFake
    implements _i4.ContainerChildren {
  _FakeContainerChildren_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRuntimeArtboard_11 extends _i1.SmartFake
    implements _i5.RuntimeArtboard {
  _FakeRuntimeArtboard_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  // TODO: implement isPlaying
  bool get isPlaying => throw UnimplementedError();

  @override
  void pause() {
    // TODO: implement pause
  }

  @override
  void play() {
    // TODO: implement play
  }
}

/// A class which mocks [RiveAnimationControllerHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockRiveAnimationControllerHelper extends _i1.Mock
    implements _i8.RiveAnimationControllerHelper {
  MockRiveAnimationControllerHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLookingRight =>
      (super.noSuchMethod(
            Invocation.getter(#isLookingRight),
            returnValue: false,
          )
          as bool);

  @override
  bool get isLookingLeft =>
      (super.noSuchMethod(Invocation.getter(#isLookingLeft), returnValue: false)
          as bool);

  @override
  bool get isHandsUp =>
      (super.noSuchMethod(Invocation.getter(#isHandsUp), returnValue: false)
          as bool);

  @override
  set isLookingRight(bool? _isLookingRight) => super.noSuchMethod(
    Invocation.setter(#isLookingRight, _isLookingRight),
    returnValueForMissingStub: null,
  );

  @override
  set isLookingLeft(bool? _isLookingLeft) => super.noSuchMethod(
    Invocation.setter(#isLookingLeft, _isLookingLeft),
    returnValueForMissingStub: null,
  );

  @override
  set isHandsUp(bool? _isHandsUp) => super.noSuchMethod(
    Invocation.setter(#isHandsUp, _isHandsUp),
    returnValueForMissingStub: null,
  );

  @override
  void initialize(_i5.Artboard? artboard) => super.noSuchMethod(
    Invocation.method(#initialize, [artboard]),
    returnValueForMissingStub: null,
  );

  @override
  void setHandsUp() => super.noSuchMethod(
    Invocation.method(#setHandsUp, []),
    returnValueForMissingStub: null,
  );

  @override
  void setHandsDown() => super.noSuchMethod(
    Invocation.method(#setHandsDown, []),
    returnValueForMissingStub: null,
  );

  @override
  void setLookRight() => super.noSuchMethod(
    Invocation.method(#setLookRight, []),
    returnValueForMissingStub: null,
  );

  @override
  void setLookLeft() => super.noSuchMethod(
    Invocation.method(#setLookLeft, []),
    returnValueForMissingStub: null,
  );

  @override
  void setIdle() => super.noSuchMethod(
    Invocation.method(#setIdle, []),
    returnValueForMissingStub: null,
  );

  @override
  void resetState() => super.noSuchMethod(
    Invocation.method(#resetState, []),
    returnValueForMissingStub: null,
  );

  @override
  void addController(_i5.RiveAnimationController<dynamic>? controller) =>
      super.noSuchMethod(
        Invocation.method(#addController, [controller]),
        returnValueForMissingStub: null,
      );

  @override
  void addDownLeftController() => super.noSuchMethod(
    Invocation.method(#addDownLeftController, []),
    returnValueForMissingStub: null,
  );

  @override
  void addDownRightController() => super.noSuchMethod(
    Invocation.method(#addDownRightController, []),
    returnValueForMissingStub: null,
  );

  @override
  void addFailController() => super.noSuchMethod(
    Invocation.method(#addFailController, []),
    returnValueForMissingStub: null,
  );

  @override
  void addHandsDownController() => super.noSuchMethod(
    Invocation.method(#addHandsDownController, []),
    returnValueForMissingStub: null,
  );

  @override
  void addHandsUpController() => super.noSuchMethod(
    Invocation.method(#addHandsUpController, []),
    returnValueForMissingStub: null,
  );

  @override
  void addSuccessController() => super.noSuchMethod(
    Invocation.method(#addSuccessController, []),
    returnValueForMissingStub: null,
  );

  @override
  _i9.Future<void> loadRiveFile(String? assetPath) =>
      (super.noSuchMethod(
            Invocation.method(#loadRiveFile, [assetPath]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  void removeAllControllers() => super.noSuchMethod(
    Invocation.method(#removeAllControllers, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [Artboard].
///
/// See the documentation for Mockito's code generation for more information.
class MockArtboard extends _i1.Mock implements _i5.Artboard {
  MockArtboard() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasChangedDrawOrderInLastUpdate =>
      (super.noSuchMethod(
            Invocation.getter(#hasChangedDrawOrderInLastUpdate),
            returnValue: false,
          )
          as bool);

  @override
  _i2.Path get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _FakePath_0(this, Invocation.getter(#path)),
          )
          as _i2.Path);

  @override
  List<_i5.DataBind> get globalDataBinds =>
      (super.noSuchMethod(
            Invocation.getter(#globalDataBinds),
            returnValue: <_i5.DataBind>[],
          )
          as List<_i5.DataBind>);

  @override
  _i3.AABB get layoutBounds =>
      (super.noSuchMethod(
            Invocation.getter(#layoutBounds),
            returnValue: _FakeAABB_1(this, Invocation.getter(#layoutBounds)),
          )
          as _i3.AABB);

  @override
  bool get frameOrigin =>
      (super.noSuchMethod(Invocation.getter(#frameOrigin), returnValue: false)
          as bool);

  @override
  bool get antialiasing =>
      (super.noSuchMethod(Invocation.getter(#antialiasing), returnValue: false)
          as bool);

  @override
  bool get canBeOrphaned =>
      (super.noSuchMethod(Invocation.getter(#canBeOrphaned), returnValue: false)
          as bool);

  @override
  List<_i10.Drawable> get drawables =>
      (super.noSuchMethod(
            Invocation.getter(#drawables),
            returnValue: <_i10.Drawable>[],
          )
          as List<_i10.Drawable>);

  @override
  _i4.AnimationList get animations =>
      (super.noSuchMethod(
            Invocation.getter(#animations),
            returnValue: _FakeAnimationList_2(
              this,
              Invocation.getter(#animations),
            ),
          )
          as _i4.AnimationList);

  @override
  _i4.EventList get events =>
      (super.noSuchMethod(
            Invocation.getter(#events),
            returnValue: _FakeEventList_3(this, Invocation.getter(#events)),
          )
          as _i4.EventList);

  @override
  Iterable<_i5.LinearAnimation> get linearAnimations =>
      (super.noSuchMethod(
            Invocation.getter(#linearAnimations),
            returnValue: <_i5.LinearAnimation>[],
          )
          as Iterable<_i5.LinearAnimation>);

  @override
  Iterable<_i5.StateMachine> get stateMachines =>
      (super.noSuchMethod(
            Invocation.getter(#stateMachines),
            returnValue: <_i5.StateMachine>[],
          )
          as Iterable<_i5.StateMachine>);

  @override
  _i5.Artboard get artboard =>
      (super.noSuchMethod(
            Invocation.getter(#artboard),
            returnValue: _FakeArtboard_4(this, Invocation.getter(#artboard)),
          )
          as _i5.Artboard);

  @override
  _i3.Vec2D get originWorld =>
      (super.noSuchMethod(
            Invocation.getter(#originWorld),
            returnValue: _FakeVec2D_5(this, Invocation.getter(#originWorld)),
          )
          as _i3.Vec2D);

  @override
  _i3.Vec2D get origin =>
      (super.noSuchMethod(
            Invocation.getter(#origin),
            returnValue: _FakeVec2D_5(this, Invocation.getter(#origin)),
          )
          as _i3.Vec2D);

  @override
  Iterable<_i5.NestedArtboard> get activeNestedArtboards =>
      (super.noSuchMethod(
            Invocation.getter(#activeNestedArtboards),
            returnValue: <_i5.NestedArtboard>[],
          )
          as Iterable<_i5.NestedArtboard>);

  @override
  Iterable<_i11.Joystick> get joysticks =>
      (super.noSuchMethod(
            Invocation.getter(#joysticks),
            returnValue: <_i11.Joystick>[],
          )
          as Iterable<_i11.Joystick>);

  @override
  Iterable<_i5.DataBind> get dataBinds =>
      (super.noSuchMethod(
            Invocation.getter(#dataBinds),
            returnValue: <_i5.DataBind>[],
          )
          as Iterable<_i5.DataBind>);

  @override
  _i3.Mat2D get renderTransform =>
      (super.noSuchMethod(
            Invocation.getter(#renderTransform),
            returnValue: _FakeMat2D_6(
              this,
              Invocation.getter(#renderTransform),
            ),
          )
          as _i3.Mat2D);

  @override
  Iterable<_i5.RiveAnimationController<dynamic>> get animationControllers =>
      (super.noSuchMethod(
            Invocation.getter(#animationControllers),
            returnValue: <_i5.RiveAnimationController<dynamic>>[],
          )
          as Iterable<_i5.RiveAnimationController<dynamic>>);

  @override
  bool get isPlaying =>
      (super.noSuchMethod(Invocation.getter(#isPlaying), returnValue: false)
          as bool);

  @override
  _i3.Vec2D get worldTranslation =>
      (super.noSuchMethod(
            Invocation.getter(#worldTranslation),
            returnValue: _FakeVec2D_5(
              this,
              Invocation.getter(#worldTranslation),
            ),
          )
          as _i3.Vec2D);

  @override
  set hasChangedDrawOrderInLastUpdate(bool? _hasChangedDrawOrderInLastUpdate) =>
      super.noSuchMethod(
        Invocation.setter(
          #hasChangedDrawOrderInLastUpdate,
          _hasChangedDrawOrderInLastUpdate,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set viewModelInstance(_i5.ViewModelInstance? _viewModelInstance) =>
      super.noSuchMethod(
        Invocation.setter(#viewModelInstance, _viewModelInstance),
        returnValueForMissingStub: null,
      );

  @override
  set dataContext(_i5.DataContext? _dataContext) => super.noSuchMethod(
    Invocation.setter(#dataContext, _dataContext),
    returnValueForMissingStub: null,
  );

  @override
  set firstDrawable(_i10.Drawable? _firstDrawable) => super.noSuchMethod(
    Invocation.setter(#firstDrawable, _firstDrawable),
    returnValueForMissingStub: null,
  );

  @override
  set frameOrigin(bool? value) => super.noSuchMethod(
    Invocation.setter(#frameOrigin, value),
    returnValueForMissingStub: null,
  );

  @override
  set antialiasing(bool? value) => super.noSuchMethod(
    Invocation.setter(#antialiasing, value),
    returnValueForMissingStub: null,
  );

  @override
  set defaultStateMachine(_i5.StateMachine? value) => super.noSuchMethod(
    Invocation.setter(#defaultStateMachine, value),
    returnValueForMissingStub: null,
  );

  @override
  int get coreType =>
      (super.noSuchMethod(Invocation.getter(#coreType), returnValue: 0) as int);

  @override
  Set<int> get coreTypes =>
      (super.noSuchMethod(Invocation.getter(#coreTypes), returnValue: <int>{})
          as Set<int>);

  @override
  double get x =>
      (super.noSuchMethod(Invocation.getter(#x), returnValue: 0.0) as double);

  @override
  double get y =>
      (super.noSuchMethod(Invocation.getter(#y), returnValue: 0.0) as double);

  @override
  double get originX =>
      (super.noSuchMethod(Invocation.getter(#originX), returnValue: 0.0)
          as double);

  @override
  double get originY =>
      (super.noSuchMethod(Invocation.getter(#originY), returnValue: 0.0)
          as double);

  @override
  int get defaultStateMachineId =>
      (super.noSuchMethod(
            Invocation.getter(#defaultStateMachineId),
            returnValue: 0,
          )
          as int);

  @override
  int get viewModelId =>
      (super.noSuchMethod(Invocation.getter(#viewModelId), returnValue: 0)
          as int);

  @override
  set x(double? value) => super.noSuchMethod(
    Invocation.setter(#x, value),
    returnValueForMissingStub: null,
  );

  @override
  set y(double? value) => super.noSuchMethod(
    Invocation.setter(#y, value),
    returnValueForMissingStub: null,
  );

  @override
  set originX(double? value) => super.noSuchMethod(
    Invocation.setter(#originX, value),
    returnValueForMissingStub: null,
  );

  @override
  set originY(double? value) => super.noSuchMethod(
    Invocation.setter(#originY, value),
    returnValueForMissingStub: null,
  );

  @override
  set defaultStateMachineId(int? value) => super.noSuchMethod(
    Invocation.setter(#defaultStateMachineId, value),
    returnValueForMissingStub: null,
  );

  @override
  set viewModelId(int? value) => super.noSuchMethod(
    Invocation.setter(#viewModelId, value),
    returnValueForMissingStub: null,
  );

  @override
  _i6.LayoutAnimationData get animationData =>
      (super.noSuchMethod(
            Invocation.getter(#animationData),
            returnValue: _FakeLayoutAnimationData_7(
              this,
              Invocation.getter(#animationData),
            ),
          )
          as _i6.LayoutAnimationData);

  @override
  _i7.LayoutStyle get layoutStyle =>
      (super.noSuchMethod(
            Invocation.getter(#layoutStyle),
            returnValue: _FakeLayoutStyle_8(
              this,
              Invocation.getter(#layoutStyle),
            ),
          )
          as _i7.LayoutStyle);

  @override
  _i7.LayoutNode get layoutNode =>
      (super.noSuchMethod(
            Invocation.getter(#layoutNode),
            returnValue: _FakeLayoutNode_9(
              this,
              Invocation.getter(#layoutNode),
            ),
          )
          as _i7.LayoutNode);

  @override
  _i12.LayoutAnimationStyle get animationStyle =>
      (super.noSuchMethod(
            Invocation.getter(#animationStyle),
            returnValue: _i12.LayoutAnimationStyle.none,
          )
          as _i12.LayoutAnimationStyle);

  @override
  _i12.LayoutStyleInterpolation get interpolation =>
      (super.noSuchMethod(
            Invocation.getter(#interpolation),
            returnValue: _i12.LayoutStyleInterpolation.hold,
          )
          as _i12.LayoutStyleInterpolation);

  @override
  double get interpolationTime =>
      (super.noSuchMethod(
            Invocation.getter(#interpolationTime),
            returnValue: 0.0,
          )
          as double);

  @override
  bool get animates =>
      (super.noSuchMethod(Invocation.getter(#animates), returnValue: false)
          as bool);

  @override
  _i3.AABB get localBounds =>
      (super.noSuchMethod(
            Invocation.getter(#localBounds),
            returnValue: _FakeAABB_1(this, Invocation.getter(#localBounds)),
          )
          as _i3.AABB);

  @override
  _i3.AABB get worldBounds =>
      (super.noSuchMethod(
            Invocation.getter(#worldBounds),
            returnValue: _FakeAABB_1(this, Invocation.getter(#worldBounds)),
          )
          as _i3.AABB);

  @override
  _i3.AABB get constraintBounds =>
      (super.noSuchMethod(
            Invocation.getter(#constraintBounds),
            returnValue: _FakeAABB_1(
              this,
              Invocation.getter(#constraintBounds),
            ),
          )
          as _i3.AABB);

  @override
  set animationData(_i6.LayoutAnimationData? _animationData) =>
      super.noSuchMethod(
        Invocation.setter(#animationData, _animationData),
        returnValueForMissingStub: null,
      );

  @override
  set style(_i12.LayoutComponentStyle? style) => super.noSuchMethod(
    Invocation.setter(#style, style),
    returnValueForMissingStub: null,
  );

  @override
  bool get clip =>
      (super.noSuchMethod(Invocation.getter(#clip), returnValue: false)
          as bool);

  @override
  double get width =>
      (super.noSuchMethod(Invocation.getter(#width), returnValue: 0.0)
          as double);

  @override
  double get height =>
      (super.noSuchMethod(Invocation.getter(#height), returnValue: 0.0)
          as double);

  @override
  int get styleId =>
      (super.noSuchMethod(Invocation.getter(#styleId), returnValue: 0) as int);

  @override
  set clip(bool? value) => super.noSuchMethod(
    Invocation.setter(#clip, value),
    returnValueForMissingStub: null,
  );

  @override
  set width(double? value) => super.noSuchMethod(
    Invocation.setter(#width, value),
    returnValueForMissingStub: null,
  );

  @override
  set height(double? value) => super.noSuchMethod(
    Invocation.setter(#height, value),
    returnValueForMissingStub: null,
  );

  @override
  set styleId(int? value) => super.noSuchMethod(
    Invocation.setter(#styleId, value),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Mat2D get worldTransform =>
      (super.noSuchMethod(
            Invocation.getter(#worldTransform),
            returnValue: _FakeMat2D_6(this, Invocation.getter(#worldTransform)),
          )
          as _i3.Mat2D);

  @override
  double get childOpacity =>
      (super.noSuchMethod(Invocation.getter(#childOpacity), returnValue: 0.0)
          as double);

  @override
  _i3.Mat2D get parentWorldTransform =>
      (super.noSuchMethod(
            Invocation.getter(#parentWorldTransform),
            returnValue: _FakeMat2D_6(
              this,
              Invocation.getter(#parentWorldTransform),
            ),
          )
          as _i3.Mat2D);

  @override
  double get opacity =>
      (super.noSuchMethod(Invocation.getter(#opacity), returnValue: 0.0)
          as double);

  @override
  set opacity(double? value) => super.noSuchMethod(
    Invocation.setter(#opacity, value),
    returnValueForMissingStub: null,
  );

  @override
  _i4.ContainerChildren get children =>
      (super.noSuchMethod(
            Invocation.getter(#children),
            returnValue: _FakeContainerChildren_10(
              this,
              Invocation.getter(#children),
            ),
          )
          as _i4.ContainerChildren);

  @override
  int get graphOrder =>
      (super.noSuchMethod(Invocation.getter(#graphOrder), returnValue: 0)
          as int);

  @override
  int get dirt =>
      (super.noSuchMethod(Invocation.getter(#dirt), returnValue: 0) as int);

  @override
  bool get isCollapsed =>
      (super.noSuchMethod(Invocation.getter(#isCollapsed), returnValue: false)
          as bool);

  @override
  Set<_i13.Component> get dependents =>
      (super.noSuchMethod(
            Invocation.getter(#dependents),
            returnValue: <_i13.Component>{},
          )
          as Set<_i13.Component>);

  @override
  Set<_i13.Component> get dependencies =>
      (super.noSuchMethod(
            Invocation.getter(#dependencies),
            returnValue: <_i13.Component>{},
          )
          as Set<_i13.Component>);

  @override
  set graphOrder(int? _graphOrder) => super.noSuchMethod(
    Invocation.setter(#graphOrder, _graphOrder),
    returnValueForMissingStub: null,
  );

  @override
  set dirt(int? _dirt) => super.noSuchMethod(
    Invocation.setter(#dirt, _dirt),
    returnValueForMissingStub: null,
  );

  @override
  set dependencyRoot(_i5.Artboard? component) => super.noSuchMethod(
    Invocation.setter(#dependencyRoot, component),
    returnValueForMissingStub: null,
  );

  @override
  set userData(dynamic value) => super.noSuchMethod(
    Invocation.setter(#userData, value),
    returnValueForMissingStub: null,
  );

  @override
  set parent(_i14.ContainerComponent? value) => super.noSuchMethod(
    Invocation.setter(#parent, value),
    returnValueForMissingStub: null,
  );

  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i15.dummyValue<String>(
              this,
              Invocation.getter(#name),
            ),
          )
          as String);

  @override
  int get parentId =>
      (super.noSuchMethod(Invocation.getter(#parentId), returnValue: 0) as int);

  @override
  set name(String? value) => super.noSuchMethod(
    Invocation.setter(#name, value),
    returnValueForMissingStub: null,
  );

  @override
  set parentId(int? value) => super.noSuchMethod(
    Invocation.setter(#parentId, value),
    returnValueForMissingStub: null,
  );

  @override
  _i5.RuntimeArtboard get context =>
      (super.noSuchMethod(
            Invocation.getter(#context),
            returnValue: _FakeRuntimeArtboard_11(
              this,
              Invocation.getter(#context),
            ),
          )
          as _i5.RuntimeArtboard);

  @override
  int get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: 0) as int);

  @override
  bool get hasValidated =>
      (super.noSuchMethod(Invocation.getter(#hasValidated), returnValue: false)
          as bool);

  @override
  set context(_i5.RuntimeArtboard? _context) => super.noSuchMethod(
    Invocation.setter(#context, _context),
    returnValueForMissingStub: null,
  );

  @override
  set id(int? _id) => super.noSuchMethod(
    Invocation.setter(#id, _id),
    returnValueForMissingStub: null,
  );

  @override
  Set<_i5.Fill> get fills =>
      (super.noSuchMethod(Invocation.getter(#fills), returnValue: <_i5.Fill>{})
          as Set<_i5.Fill>);

  @override
  Set<_i5.Stroke> get strokes =>
      (super.noSuchMethod(
            Invocation.getter(#strokes),
            returnValue: <_i5.Stroke>{},
          )
          as Set<_i5.Stroke>);

  @override
  void markLayoutDirty(_i6.LayoutComponent? layoutComponent) =>
      super.noSuchMethod(
        Invocation.method(#markLayoutDirty, [layoutComponent]),
        returnValueForMissingStub: null,
      );

  @override
  void forEachComponent(void Function(_i13.Component)? callback) =>
      super.noSuchMethod(
        Invocation.method(#forEachComponent, [callback]),
        returnValueForMissingStub: null,
      );

  @override
  T? component<T>(String? name) =>
      (super.noSuchMethod(Invocation.method(#component, [name])) as T?);

  @override
  T? getComponentWhereOrNull<T>(bool Function(_i13.Component)? callback) =>
      (super.noSuchMethod(
            Invocation.method(#getComponentWhereOrNull, [callback]),
          )
          as T?);

  @override
  bool updateComponents() =>
      (super.noSuchMethod(
            Invocation.method(#updateComponents, []),
            returnValue: false,
          )
          as bool);

  @override
  bool canPreApplyJoysticks() =>
      (super.noSuchMethod(
            Invocation.method(#canPreApplyJoysticks, []),
            returnValue: false,
          )
          as bool);

  @override
  void updateDataBinds() => super.noSuchMethod(
    Invocation.method(#updateDataBinds, []),
    returnValueForMissingStub: null,
  );

  @override
  bool applyJoysticks({bool? isRoot = false}) =>
      (super.noSuchMethod(
            Invocation.method(#applyJoysticks, [], {#isRoot: isRoot}),
            returnValue: false,
          )
          as bool);

  @override
  bool advanceInternal(
    double? elapsedSeconds, {
    bool? nested = false,
    bool? isRoot = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #advanceInternal,
              [elapsedSeconds],
              {#nested: nested, #isRoot: isRoot},
            ),
            returnValue: false,
          )
          as bool);

  @override
  bool advance(double? elapsedSeconds, {bool? nested = false}) =>
      (super.noSuchMethod(
            Invocation.method(#advance, [elapsedSeconds], {#nested: nested}),
            returnValue: false,
          )
          as bool);

  @override
  void heightChanged(double? from, double? to) => super.noSuchMethod(
    Invocation.method(#heightChanged, [from, to]),
    returnValueForMissingStub: null,
  );

  @override
  void onComponentDirty(_i13.Component? component) => super.noSuchMethod(
    Invocation.method(#onComponentDirty, [component]),
    returnValueForMissingStub: null,
  );

  @override
  bool resolveArtboard() =>
      (super.noSuchMethod(
            Invocation.method(#resolveArtboard, []),
            returnValue: false,
          )
          as bool);

  @override
  void sortDependencies() => super.noSuchMethod(
    Invocation.method(#sortDependencies, []),
    returnValueForMissingStub: null,
  );

  @override
  void update(int? dirt) => super.noSuchMethod(
    Invocation.method(#update, [dirt]),
    returnValueForMissingStub: null,
  );

  @override
  void widthChanged(double? from, double? to) => super.noSuchMethod(
    Invocation.method(#widthChanged, [from, to]),
    returnValueForMissingStub: null,
  );

  @override
  void xChanged(double? from, double? to) => super.noSuchMethod(
    Invocation.method(#xChanged, [from, to]),
    returnValueForMissingStub: null,
  );

  @override
  void yChanged(double? from, double? to) => super.noSuchMethod(
    Invocation.method(#yChanged, [from, to]),
    returnValueForMissingStub: null,
  );

  @override
  void viewModelIdChanged(int? from, int? to) => super.noSuchMethod(
    Invocation.method(#viewModelIdChanged, [from, to]),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Vec2D renderTranslation(_i3.Vec2D? worldTranslation) =>
      (super.noSuchMethod(
            Invocation.method(#renderTranslation, [worldTranslation]),
            returnValue: _FakeVec2D_5(
              this,
              Invocation.method(#renderTranslation, [worldTranslation]),
            ),
          )
          as _i3.Vec2D);

  @override
  void addComponent(_i13.Component? component) => super.noSuchMethod(
    Invocation.method(#addComponent, [component]),
    returnValueForMissingStub: null,
  );

  @override
  void removeComponent(_i13.Component? component) => super.noSuchMethod(
    Invocation.method(#removeComponent, [component]),
    returnValueForMissingStub: null,
  );

  @override
  void addNestedArtboard(_i5.NestedArtboard? artboard) => super.noSuchMethod(
    Invocation.method(#addNestedArtboard, [artboard]),
    returnValueForMissingStub: null,
  );

  @override
  void removeNestedArtboard(_i5.NestedArtboard? artboard) => super.noSuchMethod(
    Invocation.method(#removeNestedArtboard, [artboard]),
    returnValueForMissingStub: null,
  );

  @override
  void markDrawOrderDirty() => super.noSuchMethod(
    Invocation.method(#markDrawOrderDirty, []),
    returnValueForMissingStub: null,
  );

  @override
  void draw(_i2.Canvas? canvas) => super.noSuchMethod(
    Invocation.method(#draw, [canvas]),
    returnValueForMissingStub: null,
  );

  @override
  void originXChanged(double? from, double? to) => super.noSuchMethod(
    Invocation.method(#originXChanged, [from, to]),
    returnValueForMissingStub: null,
  );

  @override
  void originYChanged(double? from, double? to) => super.noSuchMethod(
    Invocation.method(#originYChanged, [from, to]),
    returnValueForMissingStub: null,
  );

  @override
  bool internalAddAnimation(_i16.Animation? animation) =>
      (super.noSuchMethod(
            Invocation.method(#internalAddAnimation, [animation]),
            returnValue: false,
          )
          as bool);

  @override
  bool internalRemoveAnimation(_i16.Animation? animation) =>
      (super.noSuchMethod(
            Invocation.method(#internalRemoveAnimation, [animation]),
            returnValue: false,
          )
          as bool);

  @override
  bool internalAddEvent(_i5.Event? event) =>
      (super.noSuchMethod(
            Invocation.method(#internalAddEvent, [event]),
            returnValue: false,
          )
          as bool);

  @override
  bool internalRemoveEvent(_i5.Event? event) =>
      (super.noSuchMethod(
            Invocation.method(#internalRemoveEvent, [event]),
            returnValue: false,
          )
          as bool);

  @override
  bool addController(_i5.RiveAnimationController<dynamic>? controller) =>
      (super.noSuchMethod(
            Invocation.method(#addController, [controller]),
            returnValue: false,
          )
          as bool);

  @override
  bool removeController(_i5.RiveAnimationController<dynamic>? controller) =>
      (super.noSuchMethod(
            Invocation.method(#removeController, [controller]),
            returnValue: false,
          )
          as bool);

  @override
  void onFillsChanged() => super.noSuchMethod(
    Invocation.method(#onFillsChanged, []),
    returnValueForMissingStub: null,
  );

  @override
  void onPaintMutatorChanged(_i17.ShapePaintMutator? mutator) =>
      super.noSuchMethod(
        Invocation.method(#onPaintMutatorChanged, [mutator]),
        returnValueForMissingStub: null,
      );

  @override
  void onStrokesChanged() => super.noSuchMethod(
    Invocation.method(#onStrokesChanged, []),
    returnValueForMissingStub: null,
  );

  @override
  void play() => super.noSuchMethod(
    Invocation.method(#play, []),
    returnValueForMissingStub: null,
  );

  @override
  void pause() => super.noSuchMethod(
    Invocation.method(#pause, []),
    returnValueForMissingStub: null,
  );

  @override
  void computeDrawOrder() => super.noSuchMethod(
    Invocation.method(#computeDrawOrder, []),
    returnValueForMissingStub: null,
  );

  @override
  void populateDataBinds(List<_i5.DataBind>? globalDataBinds) =>
      super.noSuchMethod(
        Invocation.method(#populateDataBinds, [globalDataBinds]),
        returnValueForMissingStub: null,
      );

  @override
  void sortDataBinds() => super.noSuchMethod(
    Invocation.method(#sortDataBinds, []),
    returnValueForMissingStub: null,
  );

  @override
  void computeBindings(bool? isRoot) => super.noSuchMethod(
    Invocation.method(#computeBindings, [isRoot]),
    returnValueForMissingStub: null,
  );

  @override
  void sortDrawOrder() => super.noSuchMethod(
    Invocation.method(#sortDrawOrder, []),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Artboard instance() =>
      (super.noSuchMethod(
            Invocation.method(#instance, []),
            returnValue: _FakeArtboard_4(
              this,
              Invocation.method(#instance, []),
            ),
          )
          as _i5.Artboard);

  @override
  void clipChanged(bool? from, bool? to) => super.noSuchMethod(
    Invocation.method(#clipChanged, [from, to]),
    returnValueForMissingStub: null,
  );

  @override
  bool import(_i4.ImportStack? stack) =>
      (super.noSuchMethod(
            Invocation.method(#import, [stack]),
            returnValue: false,
          )
          as bool);

  @override
  void onAddedDirty() => super.noSuchMethod(
    Invocation.method(#onAddedDirty, []),
    returnValueForMissingStub: null,
  );

  @override
  void defaultStateMachineIdChanged(int? from, int? to) => super.noSuchMethod(
    Invocation.method(#defaultStateMachineIdChanged, [from, to]),
    returnValueForMissingStub: null,
  );

  @override
  void internalDataContext(
    _i5.DataContext? dataContextValue,
    _i5.DataContext? parentDataContext,
    bool? isRoot,
  ) => super.noSuchMethod(
    Invocation.method(#internalDataContext, [
      dataContextValue,
      parentDataContext,
      isRoot,
    ]),
    returnValueForMissingStub: null,
  );

  @override
  void setDataContextFromInstance(
    _i5.ViewModelInstance? viewModelInstance,
    _i5.DataContext? parent,
    bool? isRoot,
  ) => super.noSuchMethod(
    Invocation.method(#setDataContextFromInstance, [
      viewModelInstance,
      parent,
      isRoot,
    ]),
    returnValueForMissingStub: null,
  );

  @override
  void copy(_i4.Core<_i4.CoreContext>? source) => super.noSuchMethod(
    Invocation.method(#copy, [source]),
    returnValueForMissingStub: null,
  );

  @override
  void cascadeAnimationStyle(
    _i12.LayoutStyleInterpolation? inheritedInterpolation,
    _i18.KeyFrameInterpolator? inheritedInterpolator,
    double? inheritedInterpolationTime,
  ) => super.noSuchMethod(
    Invocation.method(#cascadeAnimationStyle, [
      inheritedInterpolation,
      inheritedInterpolator,
      inheritedInterpolationTime,
    ]),
    returnValueForMissingStub: null,
  );

  @override
  void setInheritedInterpolation(
    _i12.LayoutStyleInterpolation? interpolation,
    _i18.KeyFrameInterpolator? interpolator,
    double? interpolationTime,
  ) => super.noSuchMethod(
    Invocation.method(#setInheritedInterpolation, [
      interpolation,
      interpolator,
      interpolationTime,
    ]),
    returnValueForMissingStub: null,
  );

  @override
  void clearInheritedInterpolation() => super.noSuchMethod(
    Invocation.method(#clearInheritedInterpolation, []),
    returnValueForMissingStub: null,
  );

  @override
  void paintChanged() => super.noSuchMethod(
    Invocation.method(#paintChanged, []),
    returnValueForMissingStub: null,
  );

  @override
  void markLayoutNodeDirty() => super.noSuchMethod(
    Invocation.method(#markLayoutNodeDirty, []),
    returnValueForMissingStub: null,
  );

  @override
  void markLayoutStyleDirty() => super.noSuchMethod(
    Invocation.method(#markLayoutStyleDirty, []),
    returnValueForMissingStub: null,
  );

  @override
  bool isValidParent(_i13.Component? parent) =>
      (super.noSuchMethod(
            Invocation.method(#isValidParent, [parent]),
            returnValue: false,
          )
          as bool);

  @override
  void changeArtboard(_i5.Artboard? value) => super.noSuchMethod(
    Invocation.method(#changeArtboard, [value]),
    returnValueForMissingStub: null,
  );

  @override
  void styleIdChanged(int? from, int? to) => super.noSuchMethod(
    Invocation.method(#styleIdChanged, [from, to]),
    returnValueForMissingStub: null,
  );

  @override
  void syncStyle() => super.noSuchMethod(
    Invocation.method(#syncStyle, []),
    returnValueForMissingStub: null,
  );

  @override
  void syncLayoutChildren() => super.noSuchMethod(
    Invocation.method(#syncLayoutChildren, []),
    returnValueForMissingStub: null,
  );

  @override
  void onAdded() => super.noSuchMethod(
    Invocation.method(#onAdded, []),
    returnValueForMissingStub: null,
  );

  @override
  void setupStyle(_i12.LayoutComponentStyle? style) => super.noSuchMethod(
    Invocation.method(#setupStyle, [style]),
    returnValueForMissingStub: null,
  );

  @override
  bool hasLayoutMeasurements() =>
      (super.noSuchMethod(
            Invocation.method(#hasLayoutMeasurements, []),
            returnValue: false,
          )
          as bool);

  @override
  void propagateSize() => super.noSuchMethod(
    Invocation.method(#propagateSize, []),
    returnValueForMissingStub: null,
  );

  @override
  void updateLayoutBounds() => super.noSuchMethod(
    Invocation.method(#updateLayoutBounds, []),
    returnValueForMissingStub: null,
  );

  @override
  void styleValueChanged() => super.noSuchMethod(
    Invocation.method(#styleValueChanged, []),
    returnValueForMissingStub: null,
  );

  @override
  void styleInterpolationChanged() => super.noSuchMethod(
    Invocation.method(#styleInterpolationChanged, []),
    returnValueForMissingStub: null,
  );

  @override
  void onRemoved() => super.noSuchMethod(
    Invocation.method(#onRemoved, []),
    returnValueForMissingStub: null,
  );

  @override
  void buildDependencies() => super.noSuchMethod(
    Invocation.method(#buildDependencies, []),
    returnValueForMissingStub: null,
  );

  @override
  void markWorldTransformDirty() => super.noSuchMethod(
    Invocation.method(#markWorldTransformDirty, []),
    returnValueForMissingStub: null,
  );

  @override
  void opacityChanged(double? from, double? to) => super.noSuchMethod(
    Invocation.method(#opacityChanged, [from, to]),
    returnValueForMissingStub: null,
  );

  @override
  void appendChild(_i13.Component? child) => super.noSuchMethod(
    Invocation.method(#appendChild, [child]),
    returnValueForMissingStub: null,
  );

  @override
  void prependChild(_i13.Component? child) => super.noSuchMethod(
    Invocation.method(#prependChild, [child]),
    returnValueForMissingStub: null,
  );

  @override
  void childAdded(_i13.Component? child) => super.noSuchMethod(
    Invocation.method(#childAdded, [child]),
    returnValueForMissingStub: null,
  );

  @override
  void childRemoved(_i13.Component? child) => super.noSuchMethod(
    Invocation.method(#childRemoved, [child]),
    returnValueForMissingStub: null,
  );

  @override
  bool forAll(_i14.DescentCallback? cb) =>
      (super.noSuchMethod(Invocation.method(#forAll, [cb]), returnValue: false)
          as bool);

  @override
  void forEachChild(_i14.DescentCallback? cb) => super.noSuchMethod(
    Invocation.method(#forEachChild, [cb]),
    returnValueForMissingStub: null,
  );

  @override
  void removeRecursive() => super.noSuchMethod(
    Invocation.method(#removeRecursive, []),
    returnValueForMissingStub: null,
  );

  @override
  void buildDrawOrder(
    List<_i10.Drawable>? drawables,
    _i19.DrawRules? rules,
    List<_i19.DrawRules>? allRules,
  ) => super.noSuchMethod(
    Invocation.method(#buildDrawOrder, [drawables, rules, allRules]),
    returnValueForMissingStub: null,
  );

  @override
  void propagateCollapseToChildren(bool? collapse) => super.noSuchMethod(
    Invocation.method(#propagateCollapseToChildren, [collapse]),
    returnValueForMissingStub: null,
  );

  @override
  bool propagateCollapse(bool? collapse) =>
      (super.noSuchMethod(
            Invocation.method(#propagateCollapse, [collapse]),
            returnValue: false,
          )
          as bool);

  @override
  bool addDirt(int? value, {bool? recurse = false}) =>
      (super.noSuchMethod(
            Invocation.method(#addDirt, [value], {#recurse: recurse}),
            returnValue: false,
          )
          as bool);

  @override
  void onDirty(int? mask) => super.noSuchMethod(
    Invocation.method(#onDirty, [mask]),
    returnValueForMissingStub: null,
  );

  @override
  void visitAncestor(_i13.Component? ancestor) => super.noSuchMethod(
    Invocation.method(#visitAncestor, [ancestor]),
    returnValueForMissingStub: null,
  );

  @override
  void userDataChanged(dynamic from, dynamic to) => super.noSuchMethod(
    Invocation.method(#userDataChanged, [from, to]),
    returnValueForMissingStub: null,
  );

  @override
  void parentIdChanged(int? from, int? to) => super.noSuchMethod(
    Invocation.method(#parentIdChanged, [from, to]),
    returnValueForMissingStub: null,
  );

  @override
  void parentChanged(
    _i14.ContainerComponent? from,
    _i14.ContainerComponent? to,
  ) => super.noSuchMethod(
    Invocation.method(#parentChanged, [from, to]),
    returnValueForMissingStub: null,
  );

  @override
  void allDependencies(Set<_i13.Component>? dependencies) => super.noSuchMethod(
    Invocation.method(#allDependencies, [dependencies]),
    returnValueForMissingStub: null,
  );

  @override
  bool addDependent(_i13.Component? dependent, {_i13.Component? via}) =>
      (super.noSuchMethod(
            Invocation.method(#addDependent, [dependent], {#via: via}),
            returnValue: false,
          )
          as bool);

  @override
  void markRebuildDependencies() => super.noSuchMethod(
    Invocation.method(#markRebuildDependencies, []),
    returnValueForMissingStub: null,
  );

  @override
  void clearDependencies() => super.noSuchMethod(
    Invocation.method(#clearDependencies, []),
    returnValueForMissingStub: null,
  );

  @override
  void onDependencyRemoved(_i13.Component? dependent) => super.noSuchMethod(
    Invocation.method(#onDependencyRemoved, [dependent]),
    returnValueForMissingStub: null,
  );

  @override
  void nameChanged(String? from, String? to) => super.noSuchMethod(
    Invocation.method(#nameChanged, [from, to]),
    returnValueForMissingStub: null,
  );

  @override
  void remove() => super.noSuchMethod(
    Invocation.method(#remove, []),
    returnValueForMissingStub: null,
  );

  @override
  bool validate() =>
      (super.noSuchMethod(Invocation.method(#validate, []), returnValue: false)
          as bool);

  @override
  void invalidateStrokeEffects() => super.noSuchMethod(
    Invocation.method(#invalidateStrokeEffects, []),
    returnValueForMissingStub: null,
  );

  @override
  bool addFill(_i5.Fill? fill) =>
      (super.noSuchMethod(
            Invocation.method(#addFill, [fill]),
            returnValue: false,
          )
          as bool);

  @override
  bool removeFill(_i5.Fill? fill) =>
      (super.noSuchMethod(
            Invocation.method(#removeFill, [fill]),
            returnValue: false,
          )
          as bool);

  @override
  bool addStroke(_i5.Stroke? stroke) =>
      (super.noSuchMethod(
            Invocation.method(#addStroke, [stroke]),
            returnValue: false,
          )
          as bool);

  @override
  bool removeStroke(_i5.Stroke? stroke) =>
      (super.noSuchMethod(
            Invocation.method(#removeStroke, [stroke]),
            returnValue: false,
          )
          as bool);
}
