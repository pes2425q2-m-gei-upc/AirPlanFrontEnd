// Mocks generated by Mockito 5.4.6 from annotations
// in airplan/test/chat_list_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:airplan/services/chat_service.dart' as _i2;
import 'package:airplan/services/chat_websocket_service.dart' as _i4;
import 'package:airplan/user_services.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ChatService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatService extends _i1.Mock implements _i2.ChatService {
  MockChatService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> sendMessage(String? receiverUsername, String? content) =>
      (super.noSuchMethod(
            Invocation.method(#sendMessage, [receiverUsername, content]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<_i2.Message>> getConversation(String? otherUsername) =>
      (super.noSuchMethod(
            Invocation.method(#getConversation, [otherUsername]),
            returnValue: _i3.Future<List<_i2.Message>>.value(<_i2.Message>[]),
          )
          as _i3.Future<List<_i2.Message>>);

  @override
  _i3.Future<List<_i2.Chat>> getAllChats() =>
      (super.noSuchMethod(
            Invocation.method(#getAllChats, []),
            returnValue: _i3.Future<List<_i2.Chat>>.value(<_i2.Chat>[]),
          )
          as _i3.Future<List<_i2.Chat>>);

  @override
  void disconnectFromChat() => super.noSuchMethod(
    Invocation.method(#disconnectFromChat, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ChatWebSocketService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatWebSocketService extends _i1.Mock
    implements _i4.ChatWebSocketService {
  MockChatWebSocketService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<Map<String, dynamic>> get chatMessages =>
      (super.noSuchMethod(
            Invocation.getter(#chatMessages),
            returnValue: _i3.Stream<Map<String, dynamic>>.empty(),
          )
          as _i3.Stream<Map<String, dynamic>>);

  @override
  bool get isChatConnected =>
      (super.noSuchMethod(
            Invocation.getter(#isChatConnected),
            returnValue: false,
          )
          as bool);

  @override
  void connectToChat(String? otherUsername) => super.noSuchMethod(
    Invocation.method(#connectToChat, [otherUsername]),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<bool> sendChatMessage(String? receiverUsername, String? content) =>
      (super.noSuchMethod(
            Invocation.method(#sendChatMessage, [receiverUsername, content]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> sendBlockNotification(
    String? blockedUsername,
    bool? isBlocking,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#sendBlockNotification, [
              blockedUsername,
              isBlocking,
            ]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  void disconnectChat() => super.noSuchMethod(
    Invocation.method(#disconnectChat, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i5.UserService {
  MockUserService() {
    _i1.throwOnMissingStub(this);
  }
}
