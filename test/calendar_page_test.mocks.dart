// Mocks generated by Mockito 5.4.6 from annotations
// in airplan/test/calendar_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:airplan/activity_service.dart' as _i8;
import 'package:airplan/air_quality.dart' as _i14;
import 'package:airplan/map_service.dart' as _i11;
import 'package:airplan/models/nota.dart' as _i10;
import 'package:airplan/services/auth_service.dart' as _i6;
import 'package:airplan/services/note_service.dart' as _i9;
import 'package:airplan/transit_service.dart' as _i4;
import 'package:firebase_auth/firebase_auth.dart' as _i2;
import 'package:flutter/cupertino.dart' as _i5;
import 'package:flutter_map/flutter_map.dart' as _i12;
import 'package:http/http.dart' as _i3;
import 'package:latlong2/latlong.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i15;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserCredential_0 extends _i1.SmartFake
    implements _i2.UserCredential {
  _FakeUserCredential_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeClient_1 extends _i1.SmartFake implements _i3.Client {
  _FakeClient_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTransitRoute_2 extends _i1.SmartFake implements _i4.TransitRoute {
  _FakeTransitRoute_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIconData_3 extends _i1.SmartFake implements _i5.IconData {
  _FakeIconData_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i6.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Stream<_i2.User?> get authStateChanges =>
      (super.noSuchMethod(
            Invocation.getter(#authStateChanges),
            returnValue: _i7.Stream<_i2.User?>.empty(),
          )
          as _i7.Stream<_i2.User?>);

  @override
  bool isAuthenticated() =>
      (super.noSuchMethod(
            Invocation.method(#isAuthenticated, []),
            returnValue: false,
          )
          as bool);

  @override
  _i7.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i2.UserCredential> signInWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmailAndPassword, [email, password]),
            returnValue: _i7.Future<_i2.UserCredential>.value(
              _FakeUserCredential_0(
                this,
                Invocation.method(#signInWithEmailAndPassword, [
                  email,
                  password,
                ]),
              ),
            ),
          )
          as _i7.Future<_i2.UserCredential>);

  @override
  _i7.Future<_i2.UserCredential> createUserWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createUserWithEmailAndPassword, [
              email,
              password,
            ]),
            returnValue: _i7.Future<_i2.UserCredential>.value(
              _FakeUserCredential_0(
                this,
                Invocation.method(#createUserWithEmailAndPassword, [
                  email,
                  password,
                ]),
              ),
            ),
          )
          as _i7.Future<_i2.UserCredential>);

  @override
  _i7.Future<_i2.UserCredential> signInWithCustomToken(String? token) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithCustomToken, [token]),
            returnValue: _i7.Future<_i2.UserCredential>.value(
              _FakeUserCredential_0(
                this,
                Invocation.method(#signInWithCustomToken, [token]),
              ),
            ),
          )
          as _i7.Future<_i2.UserCredential>);

  @override
  _i7.Future<void> updateDisplayName(String? displayName) =>
      (super.noSuchMethod(
            Invocation.method(#updateDisplayName, [displayName]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> resetPassword(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#resetPassword, [email]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> sendEmailVerification() =>
      (super.noSuchMethod(
            Invocation.method(#sendEmailVerification, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> updatePhotoURL(String? photoURL) =>
      (super.noSuchMethod(
            Invocation.method(#updatePhotoURL, [photoURL]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> updatePassword(String? newPassword) =>
      (super.noSuchMethod(
            Invocation.method(#updatePassword, [newPassword]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i2.UserCredential> reauthenticateWithCredential(
    _i2.AuthCredential? credential,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#reauthenticateWithCredential, [credential]),
            returnValue: _i7.Future<_i2.UserCredential>.value(
              _FakeUserCredential_0(
                this,
                Invocation.method(#reauthenticateWithCredential, [credential]),
              ),
            ),
          )
          as _i7.Future<_i2.UserCredential>);

  @override
  _i7.Future<void> reloadCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#reloadCurrentUser, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> deleteCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#deleteCurrentUser, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i2.UserCredential> signInWithPopup(
    _i2.GithubAuthProvider? githubProvider,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithPopup, [githubProvider]),
            returnValue: _i7.Future<_i2.UserCredential>.value(
              _FakeUserCredential_0(
                this,
                Invocation.method(#signInWithPopup, [githubProvider]),
              ),
            ),
          )
          as _i7.Future<_i2.UserCredential>);

  @override
  _i7.Future<_i2.UserCredential> signInWithProvider(
    _i2.GithubAuthProvider? githubProvider,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithProvider, [githubProvider]),
            returnValue: _i7.Future<_i2.UserCredential>.value(
              _FakeUserCredential_0(
                this,
                Invocation.method(#signInWithProvider, [githubProvider]),
              ),
            ),
          )
          as _i7.Future<_i2.UserCredential>);
}

/// A class which mocks [ActivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockActivityService extends _i1.Mock implements _i8.ActivityService {
  MockActivityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<Map<String, dynamic>>> fetchActivities() =>
      (super.noSuchMethod(
            Invocation.method(#fetchActivities, []),
            returnValue: _i7.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i7.Future<List<Map<String, dynamic>>>);

  @override
  _i7.Future<void> sendActivityToBackend(Map<String, String>? activityData) =>
      (super.noSuchMethod(
            Invocation.method(#sendActivityToBackend, [activityData]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  void validateActivityDates(Map<String, String>? activityData) =>
      super.noSuchMethod(
        Invocation.method(#validateActivityDates, [activityData]),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> deleteActivityFromBackend(String? activityId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteActivityFromBackend, [activityId]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> updateActivityInBackend(
    String? activityId,
    Map<String, String>? updatedActivity,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateActivityInBackend, [
              activityId,
              updatedActivity,
            ]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> isActivityFavorite(int? activityId, String? username) =>
      (super.noSuchMethod(
            Invocation.method(#isActivityFavorite, [activityId, username]),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> addActivityToFavorites(int? activityId, String? username) =>
      (super.noSuchMethod(
            Invocation.method(#addActivityToFavorites, [activityId, username]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> removeActivityFromFavorites(
    int? activityId,
    String? username,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#removeActivityFromFavorites, [
              activityId,
              username,
            ]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<Map<String, dynamic>>> fetchFavoriteActivities(
    String? username,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#fetchFavoriteActivities, [username]),
            returnValue: _i7.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i7.Future<List<Map<String, dynamic>>>);

  @override
  _i7.Future<List<Map<String, dynamic>>> fetchUserActivities(
    String? username,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#fetchUserActivities, [username]),
            returnValue: _i7.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i7.Future<List<Map<String, dynamic>>>);

  @override
  _i7.Future<void> syncActivityWithGoogleCalendar(
    Map<String, dynamic>? activity,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#syncActivityWithGoogleCalendar, [activity]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<Map<String, dynamic>?> fetchActivityById(String? activityId) =>
      (super.noSuchMethod(
            Invocation.method(#fetchActivityById, [activityId]),
            returnValue: _i7.Future<Map<String, dynamic>?>.value(),
          )
          as _i7.Future<Map<String, dynamic>?>);

  @override
  _i7.Future<void> toggleSyncPreference(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#toggleSyncPreference, [enabled]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> isSyncEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#isSyncEnabled, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);
}

/// A class which mocks [NoteService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteService extends _i1.Mock implements _i9.NoteService {
  MockNoteService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Client get client =>
      (super.noSuchMethod(
            Invocation.getter(#client),
            returnValue: _FakeClient_1(this, Invocation.getter(#client)),
          )
          as _i3.Client);

  @override
  _i7.Future<void> syncNoteWithGoogleCalendar(_i10.Nota? nota) =>
      (super.noSuchMethod(
            Invocation.method(#syncNoteWithGoogleCalendar, [nota]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<_i10.Nota>> fetchUserNotes(String? username) =>
      (super.noSuchMethod(
            Invocation.method(#fetchUserNotes, [username]),
            returnValue: _i7.Future<List<_i10.Nota>>.value(<_i10.Nota>[]),
          )
          as _i7.Future<List<_i10.Nota>>);

  @override
  _i7.Future<void> createNote(_i10.Nota? nota) =>
      (super.noSuchMethod(
            Invocation.method(#createNote, [nota]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> updateNote(int? id, _i10.Nota? nota) =>
      (super.noSuchMethod(
            Invocation.method(#updateNote, [id, nota]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> deleteNote(int? id, {String? username}) =>
      (super.noSuchMethod(
            Invocation.method(#deleteNote, [id], {#username: username}),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<_i10.Nota>> fetchUserNotesForDay(
    String? username,
    DateTime? day,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#fetchUserNotesForDay, [username, day]),
            returnValue: _i7.Future<List<_i10.Nota>>.value(<_i10.Nota>[]),
          )
          as _i7.Future<List<_i10.Nota>>);

  @override
  _i7.Future<void> syncAllNotes(String? username) =>
      (super.noSuchMethod(
            Invocation.method(#syncAllNotes, [username]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [MapService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMapService extends _i1.Mock implements _i11.MapService {
  MockMapService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i12.CircleMarker<Object>>> fetchAirQualityData(
    Map<_i13.LatLng, Map<_i14.Contaminant, _i14.AirQualityData>>?
    contaminantsPerLocation,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#fetchAirQualityData, [contaminantsPerLocation]),
            returnValue: _i7.Future<List<_i12.CircleMarker<Object>>>.value(
              <_i12.CircleMarker<Object>>[],
            ),
          )
          as _i7.Future<List<_i12.CircleMarker<Object>>>);

  @override
  _i7.Future<String> fetchPlaceDetails(_i13.LatLng? position) =>
      (super.noSuchMethod(
            Invocation.method(#fetchPlaceDetails, [position]),
            returnValue: _i7.Future<String>.value(
              _i15.dummyValue<String>(
                this,
                Invocation.method(#fetchPlaceDetails, [position]),
              ),
            ),
          )
          as _i7.Future<String>);

  @override
  _i7.Future<_i4.TransitRoute> getPublicTransportRoute(
    bool? departure,
    bool? arrival,
    DateTime? departureTime,
    DateTime? arrivalTime,
    _i13.LatLng? source,
    _i13.LatLng? destination,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getPublicTransportRoute, [
              departure,
              arrival,
              departureTime,
              arrivalTime,
              source,
              destination,
            ]),
            returnValue: _i7.Future<_i4.TransitRoute>.value(
              _FakeTransitRoute_2(
                this,
                Invocation.method(#getPublicTransportRoute, [
                  departure,
                  arrival,
                  departureTime,
                  arrivalTime,
                  source,
                  destination,
                ]),
              ),
            ),
          )
          as _i7.Future<_i4.TransitRoute>);

  @override
  _i7.Future<_i4.TransitRoute> getRoute(
    bool? departure,
    bool? arrival,
    DateTime? departureTime,
    DateTime? arrivalTime,
    int? option,
    _i13.LatLng? source,
    _i13.LatLng? destination,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getRoute, [
              departure,
              arrival,
              departureTime,
              arrivalTime,
              option,
              source,
              destination,
            ]),
            returnValue: _i7.Future<_i4.TransitRoute>.value(
              _FakeTransitRoute_2(
                this,
                Invocation.method(#getRoute, [
                  departure,
                  arrival,
                  departureTime,
                  arrivalTime,
                  option,
                  source,
                  destination,
                ]),
              ),
            ),
          )
          as _i7.Future<_i4.TransitRoute>);

  @override
  _i7.Future<int> sendRouteToBackend(_i4.TransitRoute? ruta) =>
      (super.noSuchMethod(
            Invocation.method(#sendRouteToBackend, [ruta]),
            returnValue: _i7.Future<int>.value(0),
          )
          as _i7.Future<int>);

  @override
  _i7.Future<void> updateRouteInBackend(
    MapEntry<int, _i4.TransitRoute>? route,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateRouteInBackend, [route]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> deleteRouteInBackend(int? routeId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteRouteInBackend, [routeId]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<Map<String, dynamic>>> fetchRoutes() =>
      (super.noSuchMethod(
            Invocation.method(#fetchRoutes, []),
            returnValue: _i7.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i7.Future<List<Map<String, dynamic>>>);

  @override
  _i5.IconData getDirectionTypeIcon(_i4.TipusInstruccio? type) =>
      (super.noSuchMethod(
            Invocation.method(#getDirectionTypeIcon, [type]),
            returnValue: _FakeIconData_3(
              this,
              Invocation.method(#getDirectionTypeIcon, [type]),
            ),
          )
          as _i5.IconData);
}
